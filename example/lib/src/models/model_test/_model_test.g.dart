//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_test.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModeTest extends _ModeTest {
  //
  //
  //

  static const CLASS = 'ModeTest';
  static const MODEL_ID = 'mode_test';

  static const K_DATE = 'date';
  static const K_EMAIL = 'email';
  static const K_FIRST_NAME = 'first_name';
  static const K_LAST_NAME = 'last_name';
  static const K_NAME = 'name';
  static const K_SEARCHABLE_NAME = 'searchable_name';

  dynamic _date;
  dynamic _email;
  dynamic _firstName;
  dynamic _lastName;
  dynamic _name;
  dynamic _searchableName;

  //
  //
  //

  ModeTest.empty();

  //
  //
  //

  factory ModeTest({
    DateTime? date,
    String? email,
    String? firstName,
    String? lastName,
    required String name,
    String? searchableName,
  }) {
    return ModeTest.unsafe(
      date: date,
      email: email,
      firstName: firstName,
      lastName: lastName,
      name: name,
      searchableName: searchableName,
    );
  }

  //
  //
  //

  ModeTest.unsafe({
    DateTime? date,
    String? email,
    String? firstName,
    String? lastName,
    String? name,
    String? searchableName,
  }) {
    assert(name != null);
    this._date = date;
    this._email = email;
    this._firstName = firstName;
    this._lastName = lastName;
    this._name = name;
    this._searchableName = searchableName;
  }

  //
  //
  //

  factory ModeTest.from(
    Model? other,
  ) {
    return ModeTest.fromJson(
      other is GenericModel ? other.data : other?.toJson(),
    );
  }

  //
  //
  //

  factory ModeTest.of(
    ModeTest? other,
  ) {
    return ModeTest.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModeTest.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModeTest.fromJson(decoded);
      } else {
        return ModeTest.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModeTest.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModeTest.empty()
        ..$date = otherData?[K_DATE]
        ..$email = otherData?[K_EMAIL]
        ..$firstName = otherData?[K_FIRST_NAME]
        ..$lastName = otherData?[K_LAST_NAME]
        ..$name = otherData?[K_NAME]
        ..$searchableName = otherData?[K_SEARCHABLE_NAME];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModeTest.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == MODEL_ID) {
        return ModeTest.fromJson(uri.queryParameters);
      } else {
        return ModeTest.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModeTest? convert(
    Model? other,
  ) {
    return other != null ? ModeTest.from(other) : null;
  }

  //
  //
  //

  static ModeTest? fromPool({
    required Iterable<ModeTest>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_DATE: this._date,
        K_EMAIL: this._email,
        K_FIRST_NAME: this._firstName,
        K_LAST_NAME: this._lastName,
        K_NAME: this._name,
        K_SEARCHABLE_NAME: this._searchableName,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModeTest.unsafe() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModeTest.unsafe()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModeTest.fromJson(otherData);
      if (other._date != null) {
        this.date = other._date;
      }
      if (other._email != null) {
        this.email = other._email;
      }
      if (other._firstName != null) {
        this.firstName = other._firstName;
      }
      if (other._lastName != null) {
        this.lastName = other._lastName;
      }
      if (other._name != null) {
        this.name = other._name;
      }
      if (other._searchableName != null) {
        this.searchableName = other._searchableName;
      }
    }
  }

  //
  //
  //

  String get modelId => MODEL_ID;

  //
  //
  //

  //
  //
  //

  DateTime? get date => this._date;
  dynamic get $date => this._date?.toUtc()?.toIso8601String();
  set date(DateTime? v) => this.$date = v;
  set $date(v) => this._date = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  String? get email => this._email;
  dynamic get $email =>
      this._email?.toString().trim().nullIfEmpty?.toLowerCase();
  set email(String? v) => this.$email = v;
  set $email(v) =>
      this._email = v?.toString().trim().nullIfEmpty?.toLowerCase();

  String? get firstName => this._firstName;
  dynamic get $firstName => this._firstName?.toString().trim().nullIfEmpty;
  set firstName(String? v) => this.$firstName = v;
  set $firstName(v) => this._firstName = v?.toString().trim().nullIfEmpty;

  String? get lastName => this._lastName;
  dynamic get $lastName => this._lastName?.toString().trim().nullIfEmpty;
  set lastName(String? v) => this.$lastName = v;
  set $lastName(v) => this._lastName = v?.toString().trim().nullIfEmpty;

  String get name => this._name;
  dynamic get $name => (this._name?.toString().trim().nullIfEmpty)!;
  set name(String v) => this.$name = v;
  set $name(v) => this._name = v?.toString().trim().nullIfEmpty;

  String? get searchableName => this._searchableName;
  dynamic get $searchableName => this
      ._searchableName
      ?.toString()
      .trim()
      .nullIfEmpty
      ?.toLowerCase()
      .replaceAll(r'[^\w]', ' ');
  set searchableName(String? v) => this.$searchableName = v;
  set $searchableName(v) => this._searchableName =
      v?.toString().trim().nullIfEmpty?.toLowerCase().replaceAll(r'[^\w]', ' ');
}
