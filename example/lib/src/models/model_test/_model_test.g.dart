//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_test.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelTest extends _ModelTest {
  //
  //
  //

  static const CLASS = 'ModelTest';

  @override
  String get $class => CLASS;

  static const K_DATE = 'date';
  static const K_EMAIL = 'email';
  static const K_FIRST_NAME = 'first_name';
  static const K_ID = 'id';
  static const K_LAST_NAME = 'last_name';
  static const K_NAME = 'name';
  static const K_SEARCHABLE_NAME = 'searchable_name';
  static const K_TEST_2 = 'test_2';

  DateTime? _date;
  String? _email;
  String? _firstName;
  String? _id;
  String? _lastName;
  String? _name;
  String? _searchableName;
  Map<String, List<int>>? _test2;

  //
  //
  //

  ModelTest.empty();

  //
  //
  //

  factory ModelTest({
    DateTime? date,
    String? email,
    required String firstName,
    String? id,
    String? lastName,
    required String name,
    String? searchableName,
    required Map<String, List<int>> test2,
  }) {
    return ModelTest.b(
      date: date,
      email: email,
      firstName: firstName,
      id: id,
      lastName: lastName,
      name: name,
      searchableName: searchableName,
      test2: test2,
    );
  }

  //
  //
  //

  ModelTest.b({
    DateTime? date,
    String? email,
    String? firstName,
    String? id,
    String? lastName,
    String? name,
    String? searchableName,
    Map<String, List<int>>? test2,
  }) {
    assert(firstName != null);
    assert(name != null);
    assert(test2 != null);
    this._date = date;
    this._email = email;
    this._firstName = firstName;
    this._id = id;
    this._lastName = lastName;
    this._name = name;
    this._searchableName = searchableName;
    this._test2 = test2;
  }

  //
  //
  //

  factory ModelTest.from(
    Model? other,
  ) {
    return ModelTest.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelTest.of(
    ModelTest? other,
  ) {
    return ModelTest.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelTest.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelTest.fromJson(decoded);
      } else {
        return ModelTest.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelTest.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelTest.empty()
        ..$date = otherData?[K_DATE]
        ..$email = otherData?[K_EMAIL]
        ..$firstName = otherData?[K_FIRST_NAME]
        ..$id = otherData?[K_ID]
        ..$lastName = otherData?[K_LAST_NAME]
        ..$name = otherData?[K_NAME]
        ..$searchableName = otherData?[K_SEARCHABLE_NAME]
        ..$test2 = otherData?[K_TEST_2];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelTest.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelTest.fromJson(uri.queryParameters);
      } else {
        return ModelTest.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelTest? convert(
    Model? other,
  ) {
    return other != null ? ModelTest.from(other) : null;
  }

  //
  //
  //

  static ModelTest? fromPool({
    required Iterable<ModelTest>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_DATE: this.$date,
        K_EMAIL: this.$email,
        K_FIRST_NAME: this.$firstName,
        K_ID: this.$id,
        K_LAST_NAME: this.$lastName,
        K_NAME: this.$name,
        K_SEARCHABLE_NAME: this.$searchableName,
        K_TEST_2: this.$test2,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelTest.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelTest.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelTest.fromJson(otherData);
      if (other._date != null) {
        this.date = other._date!;
      }
      if (other._email != null) {
        this.email = other._email!;
      }
      if (other._firstName != null) {
        this.firstName = other._firstName!;
      }
      if (other._id != null) {
        this.id = other._id!;
      }
      if (other._lastName != null) {
        this.lastName = other._lastName!;
      }
      if (other._name != null) {
        this.name = other._name!;
      }
      if (other._searchableName != null) {
        this.searchableName = other._searchableName!;
      }
      if (other._test2 != null) {
        this.test2 = other._test2!;
      }
    }
  }

  //
  //
  //

  DateTime? get date => this._date;
  set date(DateTime? v) => this._date = v;

  dynamic get $date => this._date?.toUtc()?.toIso8601String();
  set $date(v) => this._date = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  String? get email => this._email;
  set email(String? v) => this._email = v;

  dynamic get $email =>
      this._email?.toString().trim().nullIfEmpty?.toLowerCase();
  set $email(v) =>
      this._email = v?.toString().trim().nullIfEmpty?.toLowerCase();

  String get firstName => this._firstName!;
  set firstName(String v) => this._firstName = v;

  dynamic get $firstName => (this._firstName?.toString().trim().nullIfEmpty)!;
  set $firstName(v) => this._firstName = v?.toString().trim().nullIfEmpty;

  String? get id => this._id;
  set id(String? v) => this._id = v;

  dynamic get $id => this._id?.toString().trim().nullIfEmpty;
  set $id(v) => this._id = v?.toString().trim().nullIfEmpty;

  String? get lastName => this._lastName;
  set lastName(String? v) => this._lastName = v;

  dynamic get $lastName => this._lastName?.toString().trim().nullIfEmpty;
  set $lastName(v) => this._lastName = v?.toString().trim().nullIfEmpty;

  String get name => this._name!;
  set name(String v) => this._name = v;

  dynamic get $name => (this._name?.toString().trim().nullIfEmpty)!;
  set $name(v) => this._name = v?.toString().trim().nullIfEmpty;

  String? get searchableName => this._searchableName;
  set searchableName(String? v) => this._searchableName = v;

  dynamic get $searchableName => this
      ._searchableName
      ?.toString()
      .trim()
      .nullIfEmpty
      ?.toLowerCase()
      .replaceAll(r'[^\w]', '');
  set $searchableName(v) => this._searchableName =
      v?.toString().trim().nullIfEmpty?.toLowerCase().replaceAll(r'[^\w]', '');

  Map<String, List<int>> get test2 => this._test2!;
  set test2(Map<String, List<int>> v) => this._test2 = v;

  dynamic get $test2 => (this
      ._test2
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1
              ?.map(
                (p0) => p0,
              )
              .nonNulls
              .nullIfEmpty
              ?.toList(),
        ),
      )
      .nonNulls
      .nullIfEmpty)!;
  set $test2(v) => this._test2 = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          letList(p1)
              ?.map(
                (p0) => letInt(p0),
              )
              .nonNulls
              .nullIfEmpty
              ?.toList()
              .cast(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();
}
