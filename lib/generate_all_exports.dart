// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// XYZ Gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

import 'utils/file_io.dart';
import 'utils/helpers.dart';
import 'utils/list_file_paths.dart';
import 'package:path/path.dart' as p;

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

Future<void> generateAllExports(
  String startingDirPath,
  Set<String> folders,
) async {
  final filePaths = await listFilePaths(startingDirPath);
  if (filePaths != null) {
    var cachedDirName = "";
    for (final filePath in filePaths) {
      if (isSourceDartFilePath(filePath)) {
        final dirName = getDirName(filePath);
        final folderName = getBaseName(dirName);
        final a = pathContainsPatterns(filePath, folders);
        if (a) {
          final allFilePath = p.join(dirName, "all_$folderName.dart");
          if (dirName != cachedDirName) {
            cachedDirName = dirName;
            print("[generateAllExports] Clearing `$allFilePath`...");
            await writeFile(
              allFilePath,
              [
                "// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND",
                "// See: https://github.com/robmllze/xyz_gen",
                "\n",
              ].join("\n"),
            );
          }
          if (filePath != allFilePath) {
            final fileName = getBaseName(filePath);
            final data = "export '$fileName';";
            print("[generateAllExports] Writing `$data` to `$allFilePath`...");
            await writeFile(
              allFilePath,
              "$data\n",
              append: true,
            );
          } else {
            print("[generateAllExports] Skipping `$filePath`...");
          }
        }
      }
    }
  }
}
