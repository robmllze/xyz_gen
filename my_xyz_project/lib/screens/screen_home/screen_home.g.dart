``
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

// ignore_for_file: dead_code
// ignore_for_file: unused_element
// ignore_for_file: constant_identifier_names

part of 'screen_home.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

const _TR_KEY = "screens.ScreenHome";
const _PATH = "/home";
const _CLASS = "ScreenHome";

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

extension _ScreenTr on String {
  String screenTr([Map<dynamic, dynamic> args = const {}]) {
    return this.splitByLastOccurrenceOf("||").join("||$_TR_KEY.").tr(args);
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

const PATH_ACCESSIBLE_ONLY_IF_SIGNED_IN_AND_VERIFIED_HOME //
  = false ? [_PATH]: [];
const PATH_ACCESSIBLE_ONLY_IF_SIGNED_IN_HOME //
  = false ? [_PATH]: [];
const PATH_ACCESSIBLE_ONLY_IF_SIGNED_OUT_HOME //
  = false ? [_PATH]: [];
const PATH_ACCESSIBLE_HOME //
  = false ? [_PATH]: [];
const PATH_NOT_REDIRECTABLE_HOME //
  = false ? [_PATH]: [];

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final castScreenHomeConfiguration =
  Map<Type, MyRouteConfiguration Function(MyRouteConfiguration)>.unmodifiable({
    ScreenHomeConfiguration: (MyRouteConfiguration a) => ScreenHomeConfiguration.from(a),
});

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

MyScreen? makerScreenHome(
  MyRouteConfiguration configuration,
  bool isSignedInAndVerified,
  bool isSignedIn,
  bool isSignedOut,
) {
  if ((false && !isSignedInAndVerified) || (false && !isSignedIn) || (false && !isSignedOut)) {
    return null;
  }
  if (configuration is ScreenHomeConfiguration ||
      RegExp(
        r"^(" + _PATH + r")([?/].*)?$",
      ).hasMatch(
        Uri.decodeComponent(
          configuration.uri.toString(),
        ),
      )) {
    return ScreenHome(configuration);
  }
  return null;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// Configuration object for [ScreenHome].
///
/// ### Usage examples:
///
/// ```dart
/// // Push the screen to the app.
/// await G.router.push(ScreenHomeConfiguration(/* OPTIONS */));
///
/// // Use a unique [key] to allow pushing to multiple instances of the screen.
/// await G.router.push(ScreenHomeConfiguration(key: UniqueKey().toString(), /* OPTIONS */));
/// ```
class ScreenHomeConfiguration extends MyRouteConfiguration {
  static const PATH = _PATH;
  static const TR_KEY = _TR_KEY;
  static const CLASS = _CLASS;
  
  
  
  

  ScreenHomeConfiguration({
    String? key,
    
    
    
  }): super(
    _PATH,
    key: key,
    
    
    
  );

  ScreenHomeConfiguration.from(
    MyRouteConfiguration from,
  ) : super.fromUri(
          from.uri,
          key: from.key,
          internalParameters: from.internalParameters,
        );
  
  @override
  MyRouteConfiguration to() {
    return MyRouteConfiguration.fromUri(
      this.uri,
      key: this.key,
      internalParameters: this.internalParameters,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract class _LogicBroker<T1 extends ScreenHome, T2 extends _State>
    extends MyScreenLogic<ScreenHomeConfiguration> {
  late final screen = super.superScreen as T1;
  late final state = super.superState as T2;
  late final configuration = this.state.configuration;
  _LogicBroker(super.superScreen, super.superState);
}
``