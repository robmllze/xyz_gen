// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen

// ignore_for_file: dead_code
// ignore_for_file: unused_element
// ignore_for_file: constant_identifier_names

part of 'screen_connection_details.dart_';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

const _TR_KEY = "screens.ScreenConnectionDetails";
const _PATH = "/connection_details";
const _CLASS = "ScreenConnectionDetails";

extension _ScreenTrExtension on String {
  String screenTr([Map<dynamic, dynamic> args = const {}]) {
    return this.splitByLastOccurrenceOf("||").join("||$_L.").tr(args);
  }
}

const PATH_ACCESSIBLE_ONLY_IF_SIGNED_IN_AND_VERIFIED_CONNECTION_DETAILS =
    true ? [_PATH] : [];
const PATH_ACCESSIBLE_ONLY_IF_SIGNED_IN_CONNECTION_DETAILS =
    false ? [_PATH] : [];
const PATH_ACCESSIBLE_ONLY_IF_SIGNED_OUT_CONNECTION_DETAILS =
    false ? [_PATH] : [];
const PATH_ACCESSIBLE_CONNECTION_DETAILS = true ? [_PATH] : [];
const PATH_NOT_REDIRECTABLE_CONNECTION_DETAILS = true ? [_PATH] : [];

final castScreenConnectionDetailsConfiguration = Map<Type,
    MyRouteConfiguration Function(MyRouteConfiguration)>.unmodifiable({
  ScreenConnectionDetailsConfiguration: (MyRouteConfiguration a) =>
      ScreenConnectionDetailsConfiguration.from(a),
});

MyScreen? makerScreenConnectionDetails(
  MyRouteConfiguration configuration,
  bool isSignedInAndVerified,
  bool isSignedIn,
  bool isSignedOut,
) {
  if ((true && !isSignedInAndVerified) ||
      (false && !isSignedIn) ||
      (false && !isSignedOut)) {
    return null;
  }
  if (configuration is ScreenConnectionDetailsConfiguration ||
      RegExp(
        r"^(" + _PATH + r")([?/].*)?$",
      ).hasMatch(
        Uri.decodeComponent(
          configuration.uri.toString(),
        ),
      )) {
    return ScreenConnectionDetails(configuration);
  }
  return null;
}

/// Configuration object for [ScreenConnectionDetails].
///
/// ### Usage examples:
///
/// ```dart
/// // Push the screen to the app.
/// await G.router.push(ScreenConnectionDetailsConfiguration(/* OPTIONS */));
///
/// // Use a unique [key] to allow pushing to multiple instances of the screen.
/// await G.router.push(ScreenConnectionDetailsConfiguration(key: UniqueKey().toString(), /* OPTIONS */));
/// ```
class ScreenConnectionDetailsConfiguration extends MyRouteConfiguration {
  static const LOCATION = _PATH;
  static const TR_KEY = _TR_KEY;
  static const NAME_SCREEN_CLASS = _CLASS;

  /// Key corresponding to the value `target`
  static const K_TARGET = "target";

  /// Returns the **internal parameter** with the key `target`
  /// or [K_TARGET].
  ModelUserData get target => super.arguments<ModelUserData>(K_TARGET)!;

  ScreenConnectionDetailsConfiguration({
    String? key,
    required ModelUserData target,
  }) : super(
          _PATH,
          key: key,
          internalParameters: {
            K_TARGET: target,
          },
        );

  ScreenConnectionDetailsConfiguration.from(
    MyRouteConfiguration from,
  ) : super.fromUri(
          from.uri,
          key: from.key,
          internalParameters: from.internalParameters,
        );

  @override
  MyRouteConfiguration to() {
    return MyRouteConfiguration.fromUri(
      this.uri,
      key: this.key,
      internalParameters: this.internalParameters,
    );
  }
}

abstract class _LogicBroker<T1 extends ScreenConnectionDetails,
        T2 extends _State>
    extends MyScreenLogic<ScreenConnectionDetailsConfiguration> {
  late final screen = super.superScreen as T1;
  late final state = super.superState as T2;
  late final configuration = this.state.configuration;
  _LogicBroker(super.superScreen, super.superState);
}
