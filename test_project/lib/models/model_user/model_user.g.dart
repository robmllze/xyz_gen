// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen

// ignore_for_file: dead_code
// ignore_for_file: unused_element
// ignore_for_file: constant_identifier_names

part of 'model_user.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelUser extends ModelUserUtils {
  //
  //
  //

  static const K_ID = "id";
  static const K_ARGS = "args";
  static const K_DISPLAY_NAME = "display_name";
  static const K_FIRST_NAME = "first_name";
  static const K_LAST_NAME = "last_name";

  String? displayName;
  String? firstName;
  String? lastName;

  //
  //
  //

  ModelUser({
    required String id,
    required List<String> args,
    required this.displayName,
    required this.firstName,
    required this.lastName,
  }) : super._() {
    super.id = id;
    super.args = args;
  }

  //
  //
  //

  ModelUser.unsafe({
    String? id,
    List<String>? args,
    this.displayName,
    this.firstName,
    this.lastName,
  }) : super._() {
    super.id = id;
    super.args = args;
    assert(super.id != null);
    assert(super.args != null);
    assert(this.displayName != null);
    assert(this.firstName != null);
    assert(this.lastName != null);
  }

  //
  //
  //

  factory ModelUser.from(ModelUser other) {
    return ModelUser.fromJMap(other.toJMap());
  }

  //
  //
  //

  factory ModelUser.fromJMap(Map<String, dynamic> input) {
    try {
      return ModelUser.unsafe(
        id: input[K_ID]?.toTrimmedStringOrNull(),
        args: letList(input[K_ARGS])
            ?.map(
              (final p0) => p0?.toTrimmedStringOrNull(),
            )
            .nonNulls
            .nullIfEmpty
            ?.toList()
            .cast(),
        displayName: input[K_DISPLAY_NAME]?.toTrimmedStringOrNull(),
        firstName: input[K_FIRST_NAME]?.toTrimmedStringOrNull(),
        lastName: input[K_LAST_NAME]?.toTrimmedStringOrNull(),
      );
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJMap({dynamic defaultValue}) {
    try {
      return <String, dynamic>{
        K_ID: this.id?.toTrimmedStringOrNull(),
        K_ARGS: this
            .args
            ?.map(
              (final p0) => p0?.toTrimmedStringOrNull(),
            )
            .nonNulls
            .nullIfEmpty
            .toList(),
        K_DISPLAY_NAME: displayName?.toTrimmedStringOrNull(),
        K_FIRST_NAME: firstName?.toTrimmedStringOrNull(),
        K_LAST_NAME: lastName?.toTrimmedStringOrNull(),
      }.mapWithDefault(defaultValue);
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return ModelUser.fromJMap(this.toJMap()) as T;
  }

  //
  //
  //

  @override
  T copyWith<T extends Model>({T? other}) {
    if (other is ModelUser) {
      return this.copy().updateWith(other) as T;
    }
    assert(false);
    return this.copy();
  }

  //
  //
  //

  @override
  void updateWith<T extends Model>(T other) {
    if (other is ModelUser) {
      this.id = other.id ?? this.id;
      this.args = other.args ?? this.id;
      this.displayName = other.displayName ?? this.displayName;
      this.firstName = other.firstName ?? this.firstName;
      this.lastName = other.lastName ?? this.lastName;
    } else {
      assert(false);
    }
  }
}
